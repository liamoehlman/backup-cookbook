action :create do
  file_contents = model_content
  cron_options = new_resource.cron_options || {}

  cron cron_name do
    command cron_options[:command] ||
      "/usr/local/bin/backup perform --trigger #{new_resource.name} --config-file #{node['backup']['config_path']}/config.rb > /dev/null"

    mailto cron_options[:mailto] if cron_options.key?(:mailto)
    path cron_options[:path] if cron_options.key?(:path)
    shell cron_options[:shell] if cron_options.key?(:shell)
    user cron_options[:user] || node['backup']['user']

    minute new_resource.schedule[:minute] || '*'
    hour new_resource.schedule[:hour] || '*'
    day new_resource.schedule[:day] || '*'
    month new_resource.schedule[:month] || '*'
    weekday new_resource.schedule[:weekday] || '*'
  end

  file model_file_name do
    owner node['backup']['user']
    group node['backup']['group']
    mode '0600'
    content file_contents
  end

  new_resource.updated_by_last_action(true)
end

action :delete do
  cron cron_name do
    action :delete
  end

  file model_file_name do
    action :delete
  end
end

private

def cron_name
  "#{new_resource.name}_backup"
end

def model_content
  return <<-CONTENT
    # Backup model
    # Generated by Chef
    Backup::Model.new(:#{new_resource.name}, '#{new_resource.description || new_resource.name}') do
     #{new_resource.definition}
    end
  CONTENT
end

def model_file_name
  "#{node['backup']['model_path']}/#{new_resource.name}.rb"
end
